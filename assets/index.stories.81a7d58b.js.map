{"version":3,"file":"index.stories.81a7d58b.js","sources":["../../node_modules/framer-motion/dist/es/value/use-motion-value.mjs","../../node_modules/framer-motion/dist/es/utils/transform.mjs","../../node_modules/framer-motion/dist/es/value/use-combine-values.mjs","../../node_modules/framer-motion/dist/es/value/use-transform.mjs","../../node_modules/framer-motion/dist/es/render/dom/utils/resolve-element.mjs","../../node_modules/framer-motion/dist/es/animation/hooks/animation-controls.mjs","../../node_modules/framer-motion/dist/es/animation/GroupPlaybackControls.mjs","../../node_modules/framer-motion/dist/es/animation/utils/is-dom-keyframes.mjs","../../node_modules/framer-motion/dist/es/animation/utils/create-visual-element.mjs","../../node_modules/framer-motion/dist/es/easing/utils/create-generator-easing.mjs","../../node_modules/framer-motion/dist/es/animation/sequence/utils/calc-time.mjs","../../node_modules/framer-motion/dist/es/utils/wrap.mjs","../../node_modules/framer-motion/dist/es/easing/utils/get-easing-for-segment.mjs","../../node_modules/framer-motion/dist/es/animation/sequence/utils/edit.mjs","../../node_modules/framer-motion/dist/es/animation/sequence/utils/sort.mjs","../../node_modules/framer-motion/dist/es/animation/sequence/create.mjs","../../node_modules/framer-motion/dist/es/animation/animate.mjs","../../node_modules/framer-motion/dist/es/animation/hooks/use-animation.mjs"],"sourcesContent":["import { useContext, useState, useEffect } from 'react';\nimport { motionValue } from './index.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\n\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */\nfunction useMotionValue(initial) {\n    const value = useConstant(() => motionValue(initial));\n    /**\n     * If this motion value is being used in static mode, like on\n     * the Framer canvas, force components to rerender when the motion\n     * value is updated.\n     */\n    const { isStatic } = useContext(MotionConfigContext);\n    if (isStatic) {\n        const [, setLatest] = useState(initial);\n        useEffect(() => value.on(\"change\", setLatest), []);\n    }\n    return value;\n}\n\nexport { useMotionValue };\n","import { interpolate } from './interpolate.mjs';\n\nconst isCustomValueType = (v) => {\n    return typeof v === \"object\" && v.mix;\n};\nconst getMixer = (v) => (isCustomValueType(v) ? v.mix : undefined);\nfunction transform(...args) {\n    const useImmediate = !Array.isArray(args[0]);\n    const argOffset = useImmediate ? 0 : -1;\n    const inputValue = args[0 + argOffset];\n    const inputRange = args[1 + argOffset];\n    const outputRange = args[2 + argOffset];\n    const options = args[3 + argOffset];\n    const interpolator = interpolate(inputRange, outputRange, {\n        mixer: getMixer(outputRange[0]),\n        ...options,\n    });\n    return useImmediate ? interpolator(inputValue) : interpolator;\n}\n\nexport { transform };\n","import { useMotionValue } from './use-motion-value.mjs';\nimport { cancelFrame, frame } from '../frameloop/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\n\nfunction useCombineMotionValues(values, combineValues) {\n    /**\n     * Initialise the returned motion value. This remains the same between renders.\n     */\n    const value = useMotionValue(combineValues());\n    /**\n     * Create a function that will update the template motion value with the latest values.\n     * This is pre-bound so whenever a motion value updates it can schedule its\n     * execution in Framesync. If it's already been scheduled it won't be fired twice\n     * in a single frame.\n     */\n    const updateValue = () => value.set(combineValues());\n    /**\n     * Synchronously update the motion value with the latest values during the render.\n     * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n     */\n    updateValue();\n    /**\n     * Subscribe to all motion values found within the template. Whenever any of them change,\n     * schedule an update.\n     */\n    useIsomorphicLayoutEffect(() => {\n        const scheduleUpdate = () => frame.update(updateValue, false, true);\n        const subscriptions = values.map((v) => v.on(\"change\", scheduleUpdate));\n        return () => {\n            subscriptions.forEach((unsubscribe) => unsubscribe());\n            cancelFrame(updateValue);\n        };\n    });\n    return value;\n}\n\nexport { useCombineMotionValues };\n","import { transform } from '../utils/transform.mjs';\nimport { useCombineMotionValues } from './use-combine-values.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\n\nfunction useTransform(input, inputRangeOrTransformer, outputRange, options) {\n    const transformer = typeof inputRangeOrTransformer === \"function\"\n        ? inputRangeOrTransformer\n        : transform(inputRangeOrTransformer, outputRange, options);\n    return Array.isArray(input)\n        ? useListTransform(input, transformer)\n        : useListTransform([input], ([latest]) => transformer(latest));\n}\nfunction useListTransform(values, transformer) {\n    const latest = useConstant(() => []);\n    return useCombineMotionValues(values, () => {\n        latest.length = 0;\n        const numValues = values.length;\n        for (let i = 0; i < numValues; i++) {\n            latest[i] = values[i].get();\n        }\n        return transformer(latest);\n    });\n}\n\nexport { useTransform };\n","import { invariant } from '../../../utils/errors.mjs';\n\nfunction resolveElements(elements, scope, selectorCache) {\n    var _a;\n    if (typeof elements === \"string\") {\n        let root = document;\n        if (scope) {\n            invariant(Boolean(scope.current), \"Scope provided, but no element detected.\");\n            root = scope.current;\n        }\n        if (selectorCache) {\n            (_a = selectorCache[elements]) !== null && _a !== void 0 ? _a : (selectorCache[elements] = root.querySelectorAll(elements));\n            elements = selectorCache[elements];\n        }\n        else {\n            elements = root.querySelectorAll(elements);\n        }\n    }\n    else if (elements instanceof Element) {\n        elements = [elements];\n    }\n    /**\n     * Return an empty array\n     */\n    return Array.from(elements || []);\n}\n\nexport { resolveElements };\n","import { invariant } from '../../utils/errors.mjs';\nimport { setValues } from '../../render/utils/setters.mjs';\nimport { animateVisualElement } from '../interfaces/visual-element.mjs';\n\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value) => value.stop());\n}\n/**\n * @public\n */\nfunction animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */\n    let hasMounted = false;\n    /**\n     * A collection of linked component animation controls.\n     */\n    const subscribers = new Set();\n    const controls = {\n        subscribe(visualElement) {\n            subscribers.add(visualElement);\n            return () => void subscribers.delete(visualElement);\n        },\n        start(definition, transitionOverride) {\n            invariant(hasMounted, \"controls.start() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            const animations = [];\n            subscribers.forEach((visualElement) => {\n                animations.push(animateVisualElement(visualElement, definition, {\n                    transitionOverride,\n                }));\n            });\n            return Promise.all(animations);\n        },\n        set(definition) {\n            invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach((visualElement) => {\n                setValues(visualElement, definition);\n            });\n        },\n        stop() {\n            subscribers.forEach((visualElement) => {\n                stopAnimation(visualElement);\n            });\n        },\n        mount() {\n            hasMounted = true;\n            return () => {\n                hasMounted = false;\n                controls.stop();\n            };\n        },\n    };\n    return controls;\n}\n\nexport { animationControls };\n","class GroupPlaybackControls {\n    constructor(animations) {\n        this.animations = animations.filter(Boolean);\n    }\n    then(onResolve, onReject) {\n        return Promise.all(this.animations).then(onResolve).catch(onReject);\n    }\n    /**\n     * TODO: Filter out cancelled or stopped animations before returning\n     */\n    getAll(propName) {\n        return this.animations[0][propName];\n    }\n    setAll(propName, newValue) {\n        for (let i = 0; i < this.animations.length; i++) {\n            this.animations[i][propName] = newValue;\n        }\n    }\n    get time() {\n        return this.getAll(\"time\");\n    }\n    set time(time) {\n        this.setAll(\"time\", time);\n    }\n    get speed() {\n        return this.getAll(\"speed\");\n    }\n    set speed(speed) {\n        this.setAll(\"speed\", speed);\n    }\n    get duration() {\n        let max = 0;\n        for (let i = 0; i < this.animations.length; i++) {\n            max = Math.max(max, this.animations[i].duration);\n        }\n        return max;\n    }\n    runAll(methodName) {\n        this.animations.forEach((controls) => controls[methodName]());\n    }\n    play() {\n        this.runAll(\"play\");\n    }\n    pause() {\n        this.runAll(\"pause\");\n    }\n    stop() {\n        this.runAll(\"stop\");\n    }\n    cancel() {\n        this.runAll(\"cancel\");\n    }\n    complete() {\n        this.runAll(\"complete\");\n    }\n}\n\nexport { GroupPlaybackControls };\n","function isDOMKeyframes(keyframes) {\n    return typeof keyframes === \"object\" && !Array.isArray(keyframes);\n}\n\nexport { isDOMKeyframes };\n","import { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { SVGVisualElement } from '../../render/svg/SVGVisualElement.mjs';\nimport { HTMLVisualElement } from '../../render/html/HTMLVisualElement.mjs';\nimport { visualElementStore } from '../../render/store.mjs';\n\nfunction createVisualElement(element) {\n    const options = {\n        presenceContext: null,\n        props: {},\n        visualState: {\n            renderState: {\n                transform: {},\n                transformOrigin: {},\n                style: {},\n                vars: {},\n                attrs: {},\n            },\n            latestValues: {},\n        },\n    };\n    const node = isSVGElement(element)\n        ? new SVGVisualElement(options, {\n            enableHardwareAcceleration: false,\n        })\n        : new HTMLVisualElement(options, {\n            enableHardwareAcceleration: true,\n        });\n    node.mount(element);\n    visualElementStore.set(element, node);\n}\n\nexport { createVisualElement };\n","import { spring } from '../../animation/generators/spring/index.mjs';\nimport { calcGeneratorDuration, maxGeneratorDuration } from '../../animation/generators/utils/calc-duration.mjs';\nimport { millisecondsToSeconds } from '../../utils/time-conversion.mjs';\n\n/**\n * Create a progress => progress easing function from a generator.\n */\nfunction createGeneratorEasing(options, scale = 100) {\n    const generator = spring({ keyframes: [0, scale], ...options });\n    const duration = Math.min(calcGeneratorDuration(generator), maxGeneratorDuration);\n    return {\n        type: \"keyframes\",\n        ease: (progress) => generator.next(duration * progress).value / scale,\n        duration: millisecondsToSeconds(duration),\n    };\n}\n\nexport { createGeneratorEasing };\n","/**\n * Given a absolute or relative time definition and current/prev time state of the sequence,\n * calculate an absolute time for the next keyframes.\n */\nfunction calcNextTime(current, next, prev, labels) {\n    var _a;\n    if (typeof next === \"number\") {\n        return next;\n    }\n    else if (next.startsWith(\"-\") || next.startsWith(\"+\")) {\n        return Math.max(0, current + parseFloat(next));\n    }\n    else if (next === \"<\") {\n        return prev;\n    }\n    else {\n        return (_a = labels.get(next)) !== null && _a !== void 0 ? _a : current;\n    }\n}\n\nexport { calcNextTime };\n","const wrap = (min, max, v) => {\n    const rangeSize = max - min;\n    return ((((v - min) % rangeSize) + rangeSize) % rangeSize) + min;\n};\n\nexport { wrap };\n","import { wrap } from '../../utils/wrap.mjs';\nimport { isEasingArray } from './is-easing-array.mjs';\n\nfunction getEasingForSegment(easing, i) {\n    return isEasingArray(easing) ? easing[wrap(0, easing.length, i)] : easing;\n}\n\nexport { getEasingForSegment };\n","import { getEasingForSegment } from '../../../easing/utils/get-easing-for-segment.mjs';\nimport { removeItem } from '../../../utils/array.mjs';\nimport { mix } from '../../../utils/mix.mjs';\n\nfunction eraseKeyframes(sequence, startTime, endTime) {\n    for (let i = 0; i < sequence.length; i++) {\n        const keyframe = sequence[i];\n        if (keyframe.at > startTime && keyframe.at < endTime) {\n            removeItem(sequence, keyframe);\n            // If we remove this item we have to push the pointer back one\n            i--;\n        }\n    }\n}\nfunction addKeyframes(sequence, keyframes, easing, offset, startTime, endTime) {\n    /**\n     * Erase every existing value between currentTime and targetTime,\n     * this will essentially splice this timeline into any currently\n     * defined ones.\n     */\n    eraseKeyframes(sequence, startTime, endTime);\n    for (let i = 0; i < keyframes.length; i++) {\n        sequence.push({\n            value: keyframes[i],\n            at: mix(startTime, endTime, offset[i]),\n            easing: getEasingForSegment(easing, i),\n        });\n    }\n}\n\nexport { addKeyframes, eraseKeyframes };\n","function compareByTime(a, b) {\n    if (a.at === b.at) {\n        if (a.value === null)\n            return 1;\n        if (b.value === null)\n            return -1;\n        return 0;\n    }\n    else {\n        return a.at - b.at;\n    }\n}\n\nexport { compareByTime };\n","import { createGeneratorEasing } from '../../easing/utils/create-generator-easing.mjs';\nimport { resolveElements } from '../../render/dom/utils/resolve-element.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { fillOffset } from '../../utils/offsets/fill.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { calcNextTime } from './utils/calc-time.mjs';\nimport { addKeyframes } from './utils/edit.mjs';\nimport { compareByTime } from './utils/sort.mjs';\n\nconst defaultSegmentEasing = \"easeInOut\";\nfunction createAnimationsFromSequence(sequence, { defaultTransition = {}, ...sequenceTransition } = {}, scope) {\n    const defaultDuration = defaultTransition.duration || 0.3;\n    const animationDefinitions = new Map();\n    const sequences = new Map();\n    const elementCache = {};\n    const timeLabels = new Map();\n    let prevTime = 0;\n    let currentTime = 0;\n    let totalDuration = 0;\n    /**\n     * Build the timeline by mapping over the sequence array and converting\n     * the definitions into keyframes and offsets with absolute time values.\n     * These will later get converted into relative offsets in a second pass.\n     */\n    for (let i = 0; i < sequence.length; i++) {\n        const segment = sequence[i];\n        /**\n         * If this is a timeline label, mark it and skip the rest of this iteration.\n         */\n        if (typeof segment === \"string\") {\n            timeLabels.set(segment, currentTime);\n            continue;\n        }\n        else if (!Array.isArray(segment)) {\n            timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));\n            continue;\n        }\n        let [subject, keyframes, transition = {}] = segment;\n        /**\n         * If a relative or absolute time value has been specified we need to resolve\n         * it in relation to the currentTime.\n         */\n        if (transition.at !== undefined) {\n            currentTime = calcNextTime(currentTime, transition.at, prevTime, timeLabels);\n        }\n        /**\n         * Keep track of the maximum duration in this definition. This will be\n         * applied to currentTime once the definition has been parsed.\n         */\n        let maxDuration = 0;\n        const resolveValueSequence = (valueKeyframes, valueTransition, valueSequence, elementIndex = 0, numElements = 0) => {\n            const valueKeyframesAsList = keyframesAsList(valueKeyframes);\n            const { delay = 0, times = defaultOffset(valueKeyframesAsList), type = \"keyframes\", ...remainingTransition } = valueTransition;\n            let { ease = defaultTransition.ease || \"easeOut\", duration } = valueTransition;\n            /**\n             * Resolve stagger() if defined.\n             */\n            const calculatedDelay = typeof delay === \"function\"\n                ? delay(elementIndex, numElements)\n                : delay;\n            /**\n             * If this animation should and can use a spring, generate a spring easing function.\n             */\n            const numKeyframes = valueKeyframesAsList.length;\n            if (numKeyframes <= 2 && type === \"spring\") {\n                /**\n                 * As we're creating an easing function from a spring,\n                 * ideally we want to generate it using the real distance\n                 * between the two keyframes. However this isn't always\n                 * possible - in these situations we use 0-100.\n                 */\n                let absoluteDelta = 100;\n                if (numKeyframes === 2 &&\n                    isNumberKeyframesArray(valueKeyframesAsList)) {\n                    const delta = valueKeyframesAsList[1] - valueKeyframesAsList[0];\n                    absoluteDelta = Math.abs(delta);\n                }\n                const springTransition = { ...remainingTransition };\n                if (duration !== undefined) {\n                    springTransition.duration = secondsToMilliseconds(duration);\n                }\n                const springEasing = createGeneratorEasing(springTransition, absoluteDelta);\n                ease = springEasing.ease;\n                duration = springEasing.duration;\n            }\n            duration !== null && duration !== void 0 ? duration : (duration = defaultDuration);\n            const startTime = currentTime + calculatedDelay;\n            const targetTime = startTime + duration;\n            /**\n             * If there's only one time offset of 0, fill in a second with length 1\n             */\n            if (times.length === 1 && times[0] === 0) {\n                times[1] = 1;\n            }\n            /**\n             * Fill out if offset if fewer offsets than keyframes\n             */\n            const remainder = times.length - valueKeyframesAsList.length;\n            remainder > 0 && fillOffset(times, remainder);\n            /**\n             * If only one value has been set, ie [1], push a null to the start of\n             * the keyframe array. This will let us mark a keyframe at this point\n             * that will later be hydrated with the previous value.\n             */\n            valueKeyframesAsList.length === 1 &&\n                valueKeyframesAsList.unshift(null);\n            /**\n             * Add keyframes, mapping offsets to absolute time.\n             */\n            addKeyframes(valueSequence, valueKeyframesAsList, ease, times, startTime, targetTime);\n            maxDuration = Math.max(calculatedDelay + duration, maxDuration);\n            totalDuration = Math.max(targetTime, totalDuration);\n        };\n        if (isMotionValue(subject)) {\n            const subjectSequence = getSubjectSequence(subject, sequences);\n            resolveValueSequence(keyframes, transition, getValueSequence(\"default\", subjectSequence));\n        }\n        else {\n            /**\n             * Find all the elements specified in the definition and parse value\n             * keyframes from their timeline definitions.\n             */\n            const elements = resolveElements(subject, scope, elementCache);\n            const numElements = elements.length;\n            /**\n             * For every element in this segment, process the defined values.\n             */\n            for (let elementIndex = 0; elementIndex < numElements; elementIndex++) {\n                /**\n                 * Cast necessary, but we know these are of this type\n                 */\n                keyframes = keyframes;\n                transition = transition;\n                const element = elements[elementIndex];\n                const subjectSequence = getSubjectSequence(element, sequences);\n                for (const key in keyframes) {\n                    resolveValueSequence(keyframes[key], getValueTransition(transition, key), getValueSequence(key, subjectSequence), elementIndex, numElements);\n                }\n            }\n            prevTime = currentTime;\n            currentTime += maxDuration;\n        }\n    }\n    /**\n     * For every element and value combination create a new animation.\n     */\n    sequences.forEach((valueSequences, element) => {\n        for (const key in valueSequences) {\n            const valueSequence = valueSequences[key];\n            /**\n             * Arrange all the keyframes in ascending time order.\n             */\n            valueSequence.sort(compareByTime);\n            const keyframes = [];\n            const valueOffset = [];\n            const valueEasing = [];\n            /**\n             * For each keyframe, translate absolute times into\n             * relative offsets based on the total duration of the timeline.\n             */\n            for (let i = 0; i < valueSequence.length; i++) {\n                const { at, value, easing } = valueSequence[i];\n                keyframes.push(value);\n                valueOffset.push(progress(0, totalDuration, at));\n                valueEasing.push(easing || \"easeOut\");\n            }\n            /**\n             * If the first keyframe doesn't land on offset: 0\n             * provide one by duplicating the initial keyframe. This ensures\n             * it snaps to the first keyframe when the animation starts.\n             */\n            if (valueOffset[0] !== 0) {\n                valueOffset.unshift(0);\n                keyframes.unshift(keyframes[0]);\n                valueEasing.unshift(defaultSegmentEasing);\n            }\n            /**\n             * If the last keyframe doesn't land on offset: 1\n             * provide one with a null wildcard value. This will ensure it\n             * stays static until the end of the animation.\n             */\n            if (valueOffset[valueOffset.length - 1] !== 1) {\n                valueOffset.push(1);\n                keyframes.push(null);\n            }\n            if (!animationDefinitions.has(element)) {\n                animationDefinitions.set(element, {\n                    keyframes: {},\n                    transition: {},\n                });\n            }\n            const definition = animationDefinitions.get(element);\n            definition.keyframes[key] = keyframes;\n            definition.transition[key] = {\n                ...defaultTransition,\n                duration: totalDuration,\n                ease: valueEasing,\n                times: valueOffset,\n                ...sequenceTransition,\n            };\n        }\n    });\n    return animationDefinitions;\n}\nfunction getSubjectSequence(subject, sequences) {\n    !sequences.has(subject) && sequences.set(subject, {});\n    return sequences.get(subject);\n}\nfunction getValueSequence(name, sequences) {\n    if (!sequences[name])\n        sequences[name] = [];\n    return sequences[name];\n}\nfunction keyframesAsList(keyframes) {\n    return Array.isArray(keyframes) ? keyframes : [keyframes];\n}\nfunction getValueTransition(transition, key) {\n    return transition[key]\n        ? { ...transition, ...transition[key] }\n        : { ...transition };\n}\nconst isNumber = (keyframe) => typeof keyframe === \"number\";\nconst isNumberKeyframesArray = (keyframes) => keyframes.every(isNumber);\n\nexport { createAnimationsFromSequence, getValueTransition };\n","import { resolveElements } from '../render/dom/utils/resolve-element.mjs';\nimport { visualElementStore } from '../render/store.mjs';\nimport { invariant } from '../utils/errors.mjs';\nimport { GroupPlaybackControls } from './GroupPlaybackControls.mjs';\nimport { isDOMKeyframes } from './utils/is-dom-keyframes.mjs';\nimport { animateTarget } from './interfaces/visual-element-target.mjs';\nimport { createVisualElement } from './utils/create-visual-element.mjs';\nimport { animateSingleValue } from './interfaces/single-value.mjs';\nimport { createAnimationsFromSequence } from './sequence/create.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\n\nfunction animateElements(elementOrSelector, keyframes, options, scope) {\n    const elements = resolveElements(elementOrSelector, scope);\n    const numElements = elements.length;\n    invariant(Boolean(numElements), \"No valid element provided.\");\n    const animations = [];\n    for (let i = 0; i < numElements; i++) {\n        const element = elements[i];\n        /**\n         * Check each element for an associated VisualElement. If none exists,\n         * we need to create one.\n         */\n        if (!visualElementStore.has(element)) {\n            /**\n             * TODO: We only need render-specific parts of the VisualElement.\n             * With some additional work the size of the animate() function\n             * could be reduced significantly.\n             */\n            createVisualElement(element);\n        }\n        const visualElement = visualElementStore.get(element);\n        const transition = { ...options };\n        /**\n         * Resolve stagger function if provided.\n         */\n        if (typeof transition.delay === \"function\") {\n            transition.delay = transition.delay(i, numElements);\n        }\n        animations.push(...animateTarget(visualElement, { ...keyframes, transition }, {}));\n    }\n    return new GroupPlaybackControls(animations);\n}\nconst isSequence = (value) => Array.isArray(value) && Array.isArray(value[0]);\nfunction animateSequence(sequence, options, scope) {\n    const animations = [];\n    const animationDefinitions = createAnimationsFromSequence(sequence, options, scope);\n    animationDefinitions.forEach(({ keyframes, transition }, subject) => {\n        let animation;\n        if (isMotionValue(subject)) {\n            animation = animateSingleValue(subject, keyframes.default, transition.default);\n        }\n        else {\n            animation = animateElements(subject, keyframes, transition);\n        }\n        animations.push(animation);\n    });\n    return new GroupPlaybackControls(animations);\n}\nconst createScopedAnimate = (scope) => {\n    /**\n     * Implementation\n     */\n    function scopedAnimate(valueOrElementOrSequence, keyframes, options) {\n        let animation;\n        if (isSequence(valueOrElementOrSequence)) {\n            animation = animateSequence(valueOrElementOrSequence, keyframes, scope);\n        }\n        else if (isDOMKeyframes(keyframes)) {\n            animation = animateElements(valueOrElementOrSequence, keyframes, options, scope);\n        }\n        else {\n            animation = animateSingleValue(valueOrElementOrSequence, keyframes, options);\n        }\n        if (scope) {\n            scope.animations.push(animation);\n        }\n        return animation;\n    }\n    return scopedAnimate;\n};\nconst animate = createScopedAnimate();\n\nexport { animate, createScopedAnimate };\n","import { animationControls } from './animation-controls.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\n/**\n * Creates `AnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\nfunction useAnimationControls() {\n    const controls = useConstant(animationControls);\n    useIsomorphicLayoutEffect(controls.mount, []);\n    return controls;\n}\nconst useAnimation = useAnimationControls;\n\nexport { useAnimation, useAnimationControls };\n"],"names":["useMotionValue","initial","value","useConstant","motionValue","isStatic","useContext","MotionConfigContext","setLatest","useState","useEffect","__name","isCustomValueType","v","getMixer","transform","args","useImmediate","argOffset","inputValue","inputRange","outputRange","options","interpolator","interpolate","useCombineMotionValues","values","combineValues","updateValue","useIsomorphicLayoutEffect","scheduleUpdate","frame","subscriptions","unsubscribe","cancelFrame","useTransform","input","inputRangeOrTransformer","transformer","useListTransform","latest","numValues","i","resolveElements","elements","scope","selectorCache","_a","root","invariant","stopAnimation","visualElement","animationControls","subscribers","controls","definition","transitionOverride","animations","animateVisualElement","setValues","GroupPlaybackControls","onResolve","onReject","propName","newValue","time","speed","max","methodName","isDOMKeyframes","keyframes","createVisualElement","element","node","isSVGElement","SVGVisualElement","HTMLVisualElement","visualElementStore","createGeneratorEasing","scale","generator","spring","duration","calcGeneratorDuration","maxGeneratorDuration","progress","millisecondsToSeconds","calcNextTime","current","next","prev","labels","wrap","min","rangeSize","getEasingForSegment","easing","isEasingArray","eraseKeyframes","sequence","startTime","endTime","keyframe","removeItem","addKeyframes","offset","mix","compareByTime","a","b","defaultSegmentEasing","createAnimationsFromSequence","defaultTransition","sequenceTransition","defaultDuration","animationDefinitions","sequences","elementCache","timeLabels","prevTime","currentTime","totalDuration","segment","subject","transition","maxDuration","resolveValueSequence","valueKeyframes","valueTransition","valueSequence","elementIndex","numElements","valueKeyframesAsList","keyframesAsList","delay","times","defaultOffset","type","remainingTransition","ease","calculatedDelay","numKeyframes","absoluteDelta","isNumberKeyframesArray","delta","springTransition","secondsToMilliseconds","springEasing","targetTime","remainder","fillOffset","isMotionValue","subjectSequence","getSubjectSequence","getValueSequence","key","getValueTransition","valueSequences","valueOffset","valueEasing","at","name","isNumber","animateElements","elementOrSelector","animateTarget","isSequence","animateSequence","animation","animateSingleValue","createScopedAnimate","scopedAnimate","valueOrElementOrSequence","animate","useAnimationControls"],"mappings":"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"}