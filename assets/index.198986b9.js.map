{"version":3,"file":"index.198986b9.js","sources":["../../node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs","../../node_modules/framer-motion/dist/es/utils/use-force-update.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs","../../node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs"],"sourcesContent":["import { useRef } from 'react';\nimport { useIsomorphicLayoutEffect } from './use-isomorphic-effect.mjs';\n\nfunction useIsMounted() {\n    const isMounted = useRef(false);\n    useIsomorphicLayoutEffect(() => {\n        isMounted.current = true;\n        return () => {\n            isMounted.current = false;\n        };\n    }, []);\n    return isMounted;\n}\n\nexport { useIsMounted };\n","import { frame } from '../frameloop/index.mjs';\nimport { useState, useCallback } from 'react';\nimport { useIsMounted } from './use-is-mounted.mjs';\n\nfunction useForceUpdate() {\n    const isMounted = useIsMounted();\n    const [forcedRenderCount, setForcedRenderCount] = useState(0);\n    const forceRender = useCallback(() => {\n        isMounted.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [forcedRenderCount]);\n    /**\n     * Defer this to the end of the next animation frame in case there are multiple\n     * synchronous calls.\n     */\n    const deferredForceRender = useCallback(() => frame.postRender(forceRender), [forceRender]);\n    return [deferredForceRender, forcedRenderCount];\n}\n\nexport { useForceUpdate };\n","import * as React from 'react';\nimport { useId, useRef, useInsertionEffect } from 'react';\n\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */\nclass PopChildMeasure extends React.Component {\n    getSnapshotBeforeUpdate(prevProps) {\n        const element = this.props.childRef.current;\n        if (element && prevProps.isPresent && !this.props.isPresent) {\n            const size = this.props.sizeRef.current;\n            size.height = element.offsetHeight || 0;\n            size.width = element.offsetWidth || 0;\n            size.top = element.offsetTop;\n            size.left = element.offsetLeft;\n        }\n        return null;\n    }\n    /**\n     * Required with getSnapshotBeforeUpdate to stop React complaining.\n     */\n    componentDidUpdate() { }\n    render() {\n        return this.props.children;\n    }\n}\nfunction PopChild({ children, isPresent }) {\n    const id = useId();\n    const ref = useRef(null);\n    const size = useRef({\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n    });\n    /**\n     * We create and inject a style block so we can apply this explicit\n     * sizing in a non-destructive manner by just deleting the style block.\n     *\n     * We can't apply size via render as the measurement happens\n     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n     * styles directly on the DOM node, we might be overwriting\n     * styles set via the style prop.\n     */\n    useInsertionEffect(() => {\n        const { width, height, top, left } = size.current;\n        if (isPresent || !ref.current || !width || !height)\n            return;\n        ref.current.dataset.motionPopId = id;\n        const style = document.createElement(\"style\");\n        document.head.appendChild(style);\n        if (style.sheet) {\n            style.sheet.insertRule(`\n          [data-motion-pop-id=\"${id}\"] {\n            position: absolute !important;\n            width: ${width}px !important;\n            height: ${height}px !important;\n            top: ${top}px !important;\n            left: ${left}px !important;\n          }\n        `);\n        }\n        return () => {\n            document.head.removeChild(style);\n        };\n    }, [isPresent]);\n    return (React.createElement(PopChildMeasure, { isPresent: isPresent, childRef: ref, sizeRef: size }, React.cloneElement(children, { ref })));\n}\n\nexport { PopChild };\n","import * as React from 'react';\nimport { useId, useMemo } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { PopChild } from './PopChild.mjs';\n\nconst PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode, }) => {\n    const presenceChildren = useConstant(newChildrenMap);\n    const id = useId();\n    const context = useMemo(() => ({\n        id,\n        initial,\n        isPresent,\n        custom,\n        onExitComplete: (childId) => {\n            presenceChildren.set(childId, true);\n            for (const isComplete of presenceChildren.values()) {\n                if (!isComplete)\n                    return; // can stop searching when any is incomplete\n            }\n            onExitComplete && onExitComplete();\n        },\n        register: (childId) => {\n            presenceChildren.set(childId, false);\n            return () => presenceChildren.delete(childId);\n        },\n    }), \n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    presenceAffectsLayout ? undefined : [isPresent]);\n    useMemo(() => {\n        presenceChildren.forEach((_, key) => presenceChildren.set(key, false));\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    React.useEffect(() => {\n        !isPresent &&\n            !presenceChildren.size &&\n            onExitComplete &&\n            onExitComplete();\n    }, [isPresent]);\n    if (mode === \"popLayout\") {\n        children = React.createElement(PopChild, { isPresent: isPresent }, children);\n    }\n    return (React.createElement(PresenceContext.Provider, { value: context }, children));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n","import { useEffect } from 'react';\n\nfunction useUnmountEffect(callback) {\n    return useEffect(() => () => callback(), []);\n}\n\nexport { useUnmountEffect };\n","import * as React from 'react';\nimport { useContext, useRef, cloneElement, Children, isValidElement } from 'react';\nimport { useForceUpdate } from '../../utils/use-force-update.mjs';\nimport { useIsMounted } from '../../utils/use-is-mounted.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { useUnmountEffect } from '../../utils/use-unmount-effect.mjs';\nimport { invariant } from '../../utils/errors.mjs';\n\nconst getChildKey = (child) => child.key || \"\";\nfunction updateChildLookup(children, allChildren) {\n    children.forEach((child) => {\n        const key = getChildKey(child);\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    const filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, (child) => {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode = \"sync\", }) => {\n    invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\");\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    const forceRender = useContext(LayoutGroupContext).forceRender || useForceUpdate()[0];\n    const isMounted = useIsMounted();\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    const filteredChildren = onlyElements(children);\n    let childrenToRender = filteredChildren;\n    const exitingChildren = useRef(new Map()).current;\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    const presentChildren = useRef(childrenToRender);\n    // A lookup table to quickly reference components by key\n    const allChildren = useRef(new Map()).current;\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    const isInitialRender = useRef(true);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        updateChildLookup(filteredChildren, allChildren);\n        presentChildren.current = childrenToRender;\n    });\n    useUnmountEffect(() => {\n        isInitialRender.current = true;\n        allChildren.clear();\n        exitingChildren.clear();\n    });\n    if (isInitialRender.current) {\n        return (React.createElement(React.Fragment, null, childrenToRender.map((child) => (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child)))));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    childrenToRender = [...childrenToRender];\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    const presentKeys = presentChildren.current.map(getChildKey);\n    const targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    const numPresent = presentKeys.length;\n    for (let i = 0; i < numPresent; i++) {\n        const key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1 && !exitingChildren.has(key)) {\n            exitingChildren.set(key, undefined);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (mode === \"wait\" && exitingChildren.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exitingChildren.forEach((component, key) => {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        const child = allChildren.get(key);\n        if (!child)\n            return;\n        const insertionIndex = presentKeys.indexOf(key);\n        let exitingComponent = component;\n        if (!exitingComponent) {\n            const onExit = () => {\n                allChildren.delete(key);\n                exitingChildren.delete(key);\n                // Remove this child from the present children\n                const removeIndex = presentChildren.current.findIndex((presentChild) => presentChild.key === key);\n                presentChildren.current.splice(removeIndex, 1);\n                // Defer re-rendering until all exiting children have indeed left\n                if (!exitingChildren.size) {\n                    presentChildren.current = filteredChildren;\n                    if (isMounted.current === false)\n                        return;\n                    forceRender();\n                    onExitComplete && onExitComplete();\n                }\n            };\n            exitingComponent = (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\n            exitingChildren.set(key, exitingComponent);\n        }\n        childrenToRender.splice(insertionIndex, 0, exitingComponent);\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map((child) => {\n        const key = child.key;\n        return exitingChildren.has(key) ? (child) : (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\n    });\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        childrenToRender.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    return (React.createElement(React.Fragment, null, exitingChildren.size\n        ? childrenToRender\n        : childrenToRender.map((child) => cloneElement(child))));\n};\n\nexport { AnimatePresence };\n"],"names":["useIsMounted","isMounted","useRef","useIsomorphicLayoutEffect","__name","useForceUpdate","forcedRenderCount","setForcedRenderCount","useState","forceRender","useCallback","frame","PopChildMeasure","React","getSnapshotBeforeUpdate","prevProps","element","props","childRef","current","isPresent","size","sizeRef","height","offsetHeight","width","offsetWidth","top","offsetTop","left","offsetLeft","componentDidUpdate","render","children","PopChild","id","useId","ref","useInsertionEffect","dataset","motionPopId","style","document","createElement","head","appendChild","sheet","insertRule","removeChild","_jsx","PresenceChild","initial","onExitComplete","custom","presenceAffectsLayout","mode","presenceChildren","useConstant","newChildrenMap","context","useMemo","childId","set","isComplete","values","register","delete","undefined","forEach","_","key","PresenceContext","Map","useUnmountEffect","callback","useEffect","getChildKey","child","updateChildLookup","allChildren","onlyElements","filtered","Children","isValidElement","push","AnimatePresence","exitBeforeEnter","invariant","useContext","LayoutGroupContext","filteredChildren","childrenToRender","exitingChildren","presentChildren","isInitialRender","clear","_Fragment","map","presentKeys","targetKeys","numPresent","length","i","indexOf","has","component","get","insertionIndex","exitingComponent","removeIndex","findIndex","presentChild","splice","cloneElement"],"mappings":"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"}